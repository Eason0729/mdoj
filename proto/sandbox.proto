syntax = "proto3";

package sandbox;

message Plugin {
  string extension = 1;
  string description = 2;
  string uuid = 4;
}

message LangRequest{}
message LangDescription{
    repeated Plugin plugins = 1;
}

message JudgeRequest{
    bytes source = 2;
    repeated Task tasks = 9;
    int64 memory = 6;
    uint64 cpu_us = 7;
    string uuid = 8;
}
message JudgeResponse{
    JudgeStatus status = 2;
    optional uint32 task = 5;
    optional uint64 time = 3;
}

enum JudgeStatus{
    TimeLimitExcess = 0;
    MemoryLimitExcess = 1;
    RuntimeError = 2;
    CompileError = 3; 
    NotFound = 5;
    Accepted = 6;
    WrongAnswer = 7;
    Compiling = 9;
    Running = 8;
}

message Task{
    bytes input = 1;
    bytes output = 2;
    ExamMethod method = 3 ;
}

enum ExamMethod{
    ExactlySame = 0;
}

message UsageRequest{}

message JudgerUsage{
    int64 available_mem = 1;
    uint64 running_task = 2;
    int64 all_available_mem = 3;
    float all_available_cpu_usage = 4;
    float cpu_usage = 5;
}

service JudgeService {
    rpc Langs(LangRequest) returns (LangDescription);
    rpc Run(JudgeRequest) returns (stream JudgeResponse);
    rpc Usage(UsageRequest) returns (JudgerUsage);
}