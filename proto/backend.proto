syntax = "proto3";

package oj.backend;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

// Search
enum SortBy {
  UploadDate = 0;
  ACRate = 1;
  SubmitCount = 2;
  Score = 3;
  Difficulty = 4;
}

message Page {
  uint32 offset = 1;
  uint32 amount = 2;
}

message ListRequest {
  SortBy sort_by = 1;
  bool reverse = 2;
  Page page = 3;
}

message SearchByTextRequest {
  SortBy sort_by = 1;
  Page page = 2;
  string text = 3;
}

message SearchByTagRequest {
  SortBy sort_by = 1;
  Page page = 2;
  string tag = 3;
}

// Announcements
message Announcements { repeated AnnouncementInfo list = 1; }

message AnnouncementInfo {
  AnnouncementId id = 1;
  string title = 2;
  google.protobuf.Timestamp upload_date = 3;
}

message AnnouncementFullInfo {
  AnnouncementInfo info = 1;
  UserId author = 2;
  string content = 3;
  bool public = 4;
}

message AnnouncementId { int32 id = 1; }

message AnnouncementLink {
  AnnouncementId announcement_id = 1;
  ContestId contest_id = 2;
}

service AnnouncementSet {
  rpc List(ListRequest) returns (Announcements);
  rpc SearchByText(SearchByTextRequest) returns (Announcements);
  rpc SearchByTag(SearchByTagRequest) returns (Announcements);
  rpc FullInfo(AnnouncementId) returns (AnnouncementFullInfo);

  rpc Create(AnnouncementFullInfo) returns (google.protobuf.Empty);
  rpc Update(AnnouncementFullInfo) returns (google.protobuf.Empty);
  rpc Remove(AnnouncementId) returns (google.protobuf.Empty);

  rpc Link(AnnouncementLink) returns (google.protobuf.Empty);
  rpc Unlink(AnnouncementLink) returns (google.protobuf.Empty);
}

// Educations
message Educations { repeated EducationInfo list = 1; }

message EducationInfo {
  EducationId id = 1;
  string title = 2;
  google.protobuf.Timestamp begin = 3;
  google.protobuf.Timestamp end = 4;
}

message EducationFullInfo {
  EducationInfo info = 1;
  string content = 2;
  repeated ProblemId problems = 3;
}

message EducationId { int32 id = 1; }

message EducationLink {
  EducationId education_id = 1;
  ProblemId problem_id = 2;
}

service EducationSet {
  rpc List(ListRequest) returns (Educations);
  rpc SearchByText(SearchByTextRequest) returns (Educations);
  rpc SearchByTag(SearchByTagRequest) returns (Educations);
  rpc FullInfo(EducationId) returns (EducationFullInfo);

  rpc Create(EducationFullInfo) returns (google.protobuf.Empty);
  rpc Update(EducationFullInfo) returns (google.protobuf.Empty);
  rpc Remove(EducationId) returns (google.protobuf.Empty);

  rpc Link(EducationLink) returns (google.protobuf.Empty);
  rpc Unlink(EducationLink) returns (google.protobuf.Empty);
}

// Problems
message Problems { repeated ProblemInfo list = 1; }

message ProblemInfo {
  ProblemId id = 1;
  string title = 2;
  uint32 submits = 3;
  float ac_rate = 4;
}

message ProblemId { int32 id = 1; }

message ProblemFullInfo {
  ProblemInfo info = 1;
  string content = 2;
  optional EducationId education_id = 3;
  uint32 difficulty = 4;
  bool public = 5;
}

message ProblemLink {
  ContestId contest_id = 1;
  ProblemId problem_id = 2;
}

message TestcaseId { int32 id = 1; }

message Case {
  repeated string inputs = 1;
  repeated string outputs = 2;
}

message Testcase {
  TestcaseId id = 1;
  uint32 score = 2;
  repeated Case cases = 3;
}

service ProblemSet {
  rpc List(ListRequest) returns (Problems);
  rpc SearchByText(SearchByTextRequest) returns (Problems);
  rpc SearchByTag(SearchByTagRequest) returns (Problems);
  rpc FullInfo(ProblemId) returns (ProblemFullInfo);

  rpc Create(ProblemFullInfo) returns (google.protobuf.Empty);
  rpc Update(ProblemFullInfo) returns (google.protobuf.Empty);
  rpc Remove(ProblemId) returns (google.protobuf.Empty);

  rpc Link(ProblemLink) returns (google.protobuf.Empty);
  rpc Unlink(ProblemLink) returns (google.protobuf.Empty);
  rpc AddTest(Testcase) returns (google.protobuf.Empty);
  rpc RemoveTest(TestcaseId) returns (google.protobuf.Empty);
  rpc Rejudge(ProblemId) returns (stream google.protobuf.Empty);
}

// Contest
message ContestId { int32 id = 1; }

message Contests { repeated ContestInfo list = 1; }

message ContestInfo {
  ContestId id = 1;
  string title = 2;
  uint32 participant_count = 3;
  google.protobuf.Timestamp begin = 4;
  google.protobuf.Timestamp end = 5;
}

message ContestFullInfo {
  ContestInfo info = 1;
  string content = 2;
  UserId hoster = 3;
  repeated ProblemId problems = 4;
}

message UserRank {
  UserId user_id = 1;
  int32 score = 2;
  uint32 rank = 3;
}

message UserRanks { repeated UserRank list = 1; }

service ContestSet {
  rpc List(ListRequest) returns (Contests);
  rpc SearchByText(SearchByTextRequest) returns (Contests);
  rpc SearchByTag(SearchByTagRequest) returns (Contests);
  rpc FullInfo(ContestId) returns (ContestFullInfo);

  rpc Create(ContestFullInfo) returns (google.protobuf.Empty);
  rpc Update(ContestFullInfo) returns (google.protobuf.Empty);
  rpc Remove(ContestId) returns (google.protobuf.Empty);

  rpc Join(ContestId) returns (google.protobuf.Empty);
  rpc Exit(ContestId) returns (google.protobuf.Empty);
  rpc AddSubmit(SubmitUpload) returns (SubmitId);
  rpc Rank(ListRequest) returns (UserRanks);
}

// Submit
enum JudgeState {
  AC = 0;
  NA = 1;
  WA = 2;
  CE = 3;
  RE = 4;
  RF = 5;
  TLE = 6;
  MLE = 7;
  OLE = 8;
}

message SubmitId { int32 id = 1; }

message Submits { repeated SubmitInfo list = 1; }

message SubmitUpload {
  SubmitId id = 1;
  bytes code = 2;
  // ContestId contest_id = 3;
}

message SubmitInfo {
  SubmitId id = 1;
  google.protobuf.Timestamp upload_time = 3;
  uint64 time = 4;
  uint64 peak_mem = 5;
  uint64 score = 6;
  JudgeState state = 7;
  // optional ContestId contest_id = 2;
}

message SubmitStatus {
  JudgeState state = 1;
  uint64 time = 2;
  uint64 peak_mem = 3;
}

service SubmitSet {
  rpc List(ListRequest) returns (Submits);
  rpc SearchByText(SearchByTextRequest) returns (Submits);
  rpc SearchByTag(SearchByTagRequest) returns (Submits);
  rpc Info(SubmitId) returns (SubmitInfo);

  rpc Create(SubmitInfo) returns (google.protobuf.Empty);
  rpc Update(SubmitInfo) returns (google.protobuf.Empty);
  rpc Remove(SubmitId) returns (google.protobuf.Empty);

  rpc Follow(SubmitId) returns (stream SubmitStatus);
}

// User
message UserId { int32 id = 1; }

message UserInfo {
  string username = 1;
  int32 score = 2;
  UserId id = 3;
}

message UserFullInfo {
  UserInfo info = 1;
  bytes raw_pwd = 2;
}

message Users { repeated UserInfo list = 1; }

message UserLink {
  EducationId education_id = 1;
  ProblemId problem_id = 2;
}

service UserSet {
  rpc List(ListRequest) returns (Users);
  rpc SearchByText(SearchByTextRequest) returns (Users);
  rpc SearchByTag(SearchByTagRequest) returns (Users);
  rpc FullInfo(UserId) returns (UserFullInfo);

  rpc Create(UserFullInfo) returns (google.protobuf.Empty);
  rpc Update(UserFullInfo) returns (google.protobuf.Empty);
  rpc Remove(UserId) returns (google.protobuf.Empty);

  rpc Link(UserLink) returns (google.protobuf.Empty);
  rpc Unlink(UserLink) returns (google.protobuf.Empty);
}

message TokenInfo {
  Token token = 1;
  bytes permission = 2;
  google.protobuf.Timestamp expiry = 3;
}

message Token { bytes signature = 1; }
message Tokens { repeated Token list = 1; }

message LoginRequest {
  string usertitle = 1;
  bytes raw_pwd = 2;
}

service TokenSet {
  rpc List(ListRequest) returns (Tokens);

  rpc Create(LoginRequest) returns (TokenInfo);
  rpc Refresh(Token) returns (TokenInfo);

  rpc Logout(Token) returns (google.protobuf.Empty);
}

// todo admin api
