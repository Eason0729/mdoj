syntax = "proto3";

package oj.backend;

// import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

// Search
message Sort {
  SortBy sort_by = 1;
  bool reverse = 2;
}

enum SortBy {
  UploadDate = 0;
  ACRate = 1;
  SubmitCount = 2;
  Score = 3;
  Difficulty = 4;
}

message Page {
  uint32 offset = 1;
  uint32 amount = 2;
}

message ListRequest {
  Sort sort = 1;
  Page page = 2;
}

message SearchByTextRequest {
  Sort sort = 1;
  Page page = 2;
  string text = 3;
}

message SearchByTagRequest {
  SortBy sort_by = 1;
  Page page = 2;
  string tag = 3;
}

// Problems
message Problems { repeated ProblemInfo list = 1; }

message ProblemInfo {
  ProblemId id = 1;
  string name = 2;
  uint32 submit_count = 3;
  float ac_rate = 4;
}

message ProblemId { uint32 id = 1; }

message ProblemFullInfo {
  ProblemInfo info = 1;
  string description = 2;
  optional string edu = 3;
  repeated TestCase tests = 4;
  optional bool public = 5;
}

message TestCase {
  string input = 1;
  string output = 2;
}

message LinkRequest{
  ContestId contest_id = 1;
  ProblemId problem_id = 2;
}

service ProblemSet {
  // Queryable
  rpc List(ListRequest) returns (Problems);
  rpc SearchByText(SearchByTextRequest) returns (Problems);
  rpc SearchByTag(SearchByTagRequest) returns (Problems);
  rpc FullInfo(ProblemId) returns (ProblemFullInfo);
  
  // Editable
  rpc Create(ProblemFullInfo) returns (google.protobuf.Empty);
  rpc Update(ProblemFullInfo) returns (google.protobuf.Empty);
  rpc Remove(ProblemId) returns (google.protobuf.Empty);

  // special
  rpc Link(LinkRequest) returns (google.protobuf.Empty);
}

// Contest
message ContestId { uint32 id = 1; }

// message Contests { repeated ContestInfo list = 1; }

// message ContestInfo {
//   ContestId id = 1;
//   string name = 2;
//   uint32 participant_count = 3;
//   google.protobuf.Timestamp begin = 4;
//   google.protobuf.Timestamp end = 5;
// }

// message ContestFullInfo {
//   ContestInfo info = 1;
//   string description = 2;
//   UserId hoster = 3;
//   repeated ProblemId problems = 4;
// }

// service ContestSet {
//   rpc List(ListRequest) returns (Contests);

//   rpc SearchByText(SearchByTextRequest) returns (Contests);

//   rpc SearchByTag(SearchByTagRequest) returns (Contests);

//   rpc FullInfo(ContestId) returns (ContestFullInfo);

//   rpc Join(ContestId) returns (google.protobuf.Empty);

//   rpc Exit(ContestId) returns (google.protobuf.Empty);

//   rpc Create(ContestFullInfo) returns (google.protobuf.Empty);

//   rpc Update(ContestFullInfo) returns (google.protobuf.Empty);

//   rpc Close(ContestId) returns (google.protobuf.Empty);

//   // rpc Submit(SubmitFullInfo)
// }

// // Submit

// message SubmitId { uint32 id = 1; }

// message Submits { repeated SubmitInfo list = 1; }

// message SubmitInfo {
//   SubmitId id = 1;
//   optional ContestId contest_id = 2;
//   optional bytes code =3; 
// }

// message SubmitFullInfo {
//   SubmitInfo into = 1;
  
// }

// service SubmitSet {
//   // rpc List(ListRequest)

//   // rpc Submit(SubmitFullInfo)

//   // rpc Follow(SubmitId) returns (stream SubmitStatus);

//   // rpc FullInfo(SubmitId) returns (SubmitFullInfo);
// }

// // message Token{
// //   bytes signature = 1;
// //   bytes permission = 2;
// //   google.protobuf.Timestamp expiry = 3;
// // }

// // User
// message UserId { uint32 id = 1; }

// message UserInfo {
//   string username = 1;
//   optional bytes raw_pwd = 2;
//   UserId id = 3;
// }

// message UserFullInfo {
//   UserInfo info = 1;
//   string description = 2;
//   int32 score = 4;
// }

// message Users { repeated UserInfo list = 1; }

// service UserSet {
//   rpc List(ListRequest) returns (Users);

//   rpc SearchByText(SearchByTextRequest) returns (Users);

//   rpc FullInfo(UserId) returns (UserFullInfo);
// }

// service AuthSet {
//   rpc AddUser(UserFullInfo) returns (google.protobuf.Empty);

//   rpc RemoveUser(UserId) returns (google.protobuf.Empty);
// }

// // todo admin api
