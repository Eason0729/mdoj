syntax = "proto3";

package oj.judger;

import "google/protobuf/empty.proto";

message JudgeRequest {
  string lang_uid = 1;
  bytes code = 2;
  // memory limit in byte
  int64 memory = 3;
  // time limit in nanosecond
  uint64 time = 4;
  JudgeMatchRule rule = 5;
  // len must > 0
  repeated TestIO tests = 6;
}

message TestIO {
  bytes input = 1;
  bytes output = 2;
}

message JudgeResponse {
  oneof task {
    // number of test case running(or finished)
    int32 case = 1;
    JudgeResult result = 2;
  }
}

message JudgeResult {
  JudgeResultState status = 1;
  // the longest time the code need to run the input
  float max_time = 2;
}

enum JudgeResultState {
  AC = 0;
  NA = 1;
  WA = 2;
  CE = 3;
  RE = 4;
  RF = 5;
  TLE = 6;
  MLE = 7;
  OLE = 8;
}

enum JudgeMatchRule {
  ExactSame = 0;
  IgnoreSpace = 1;
  SkipSNL = 2;
}

message Langs { repeated LangInfo list = 1; }

message LangInfo {
  string lang_uid = 1;
  string lang_name = 2;
  // compiler info or runtime info
  string info = 3;
  string lang_ext = 4;
}

message JudgeInfo {
  // memory limit of judger in byte
  int64 memory = 1;
  // max possible deviation in nanosecond
  int64 accuracy = 2;
  Langs langs = 3;
  float cpu_factor = 4;
}

service Judger {
  // judge code
  rpc Judge(JudgeRequest) returns (stream JudgeResponse);

  rpc JudgerInfo(google.protobuf.Empty) returns (JudgeInfo);
}
